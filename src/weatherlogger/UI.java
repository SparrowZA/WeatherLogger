/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package weatherlogger;

/**
 *
 * @author Marc
 */

import javax.swing.Timer;
import java.awt.event.*;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class UI extends javax.swing.JFrame
                        implements ActionListener {
    private final SerialCom serial;    
    private final WindConverter windConvert = new WindConverter();
    private final TempConverter tempConvert = new TempConverter();
    private final JDBCTableCreate createTable = new JDBCTableCreate();
    private final FileWrite writeTo = new FileWrite();
    private final JDBCWrite dbaWrite = new JDBCWrite();
    private OptionsObject options = new OptionsObject(1,1,1); //object to keep options chosen
    
    private String windCom,tempCom;
    private int bit;
    private double milesWind, temperature;    
    DecimalFormat format = new DecimalFormat("#.##");
    Timer timer;                        //Swing timer used to update textFields
    
    /**
     * Creates new form UI
     */
    public UI() {
        timer = new Timer( 1000 , (ActionListener) this);
        //createTable.createTable();
        this.serial = new SerialCom();
        serial.initialize();
        initComponents();
    }
    
    //Create a action listener class that runs everytime the timer goes off
    @Override
    public void actionPerformed(ActionEvent e){    
        //Check which combo box options are selected                      
        windCom = serial.getWind();
        tempCom = serial.getTemp();

        //Check options object if Kph is selected
        if(options.getWindOption() == 1){
            //Check options object for save location
            if(options.getWindOption() == 1){
                writeTo.WriteToFile(windCom, tempCom);
            }
            //Check options object if Mph is selected
            if(options.getLocation() == 2){
                dbaWrite.jdbcWrite(windCom, tempCom);
            } 
            
            //Set labels
            speedLabel.setText("Kph");
            //Get wind data from serial port and format it 
            windConvert.setKPH(Double.parseDouble(windCom)); 
            windField.setText(Double.toString(windConvert.getKPH()));
        }
        
        //Check options object if Mph is selected
        if(options.getWindOption() == 2){
            //Check options object for save location
            if(options.getWindOption() == 1){
                writeTo.WriteToFile(windCom, tempCom);
            }
            //Check options object if Mph is selected
            if(options.getLocation() == 2){
                dbaWrite.jdbcWrite(windCom, tempCom);
            } 
            
            //Set labels
            speedLabel.setText("Mph");
            //Get wind data from serial port and format it 
            windConvert.setMPH(Double.parseDouble(windCom));
            milesWind = windConvert.getMPH();
            windCom = format.format(milesWind);
            windField.setText(windCom);
        } 
        
        //Check options object if Celsuis is selected
        if(options.getTempOption() == 1){
            //Check options object for save location
            if(options.getWindOption() == 1){
                writeTo.WriteToFile(windCom, tempCom);
            }
            //Check options object if Mph is selected
            if(options.getLocation() == 2){
                dbaWrite.jdbcWrite(windCom, tempCom);
            } 
            
            degreeLabel.setText("'C");
            //Get Temperature data from the serial port            
            tempField.setText(tempCom);
        }
        
        //Check options object if Fahrenheit is selected
        if(options.getTempOption() == 2){
            //Check options object for save location
            if(options.getWindOption() == 1){
                writeTo.WriteToFile(windCom, tempCom);
            }
            //Check options object if Mph is selected
            if(options.getLocation() == 2){
                dbaWrite.jdbcWrite(windCom, tempCom);
            } 
            
            degreeLabel.setText("'F");
            tempConvert.setFahr(Double.parseDouble(tempCom));
            temperature = tempConvert.getFahr();
            tempCom = format.format(temperature);            
            tempField.setText(tempCom);
        }
    }  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        windLabel = new javax.swing.JLabel();
        windField = new javax.swing.JTextField();
        tempField = new javax.swing.JTextField();
        tempLabel = new javax.swing.JLabel();
        speedLabel = new javax.swing.JLabel();
        degreeLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        statsItem = new javax.swing.JMenuItem();
        optionsItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setMinimumSize(new java.awt.Dimension(260, 220));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Record");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startReading(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 166, -1, -1));

        jButton2.setText("Stop");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopReading(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 166, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 260, 10));

        windLabel.setText("Wind Speed");
        getContentPane().add(windLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 18, -1, -1));

        windField.setEditable(false);
        getContentPane().add(windField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 107, 29));

        tempField.setEditable(false);
        getContentPane().add(tempField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 107, 29));

        tempLabel.setText("Temperature");
        getContentPane().add(tempLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        speedLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        speedLabel.setText("Kph");
        getContentPane().add(speedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, 30));

        degreeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        degreeLabel.setText("'C");
        getContentPane().add(degreeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 20, 30));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        backgroundLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\Marc\\Documents\\NetBeansProjects\\WeatherLogger_Conplete_V1.0\\Weather.jpg")); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 260, 220));

        jMenu1.setText("File");

        statsItem.setText("Stats");
        statsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsItemActionPerformed(evt);
            }
        });
        jMenu1.add(statsItem);

        optionsItem.setText("Options");
        optionsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsItemActionPerformed(evt);
            }
        });
        jMenu1.add(optionsItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startReading(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startReading
        bit = 49;
        if(serial.sendData( bit )) {
            timer.setInitialDelay(150);
            timer.start();
        }
        else {
            final JPanel warningPanel = new JPanel();
                
            JOptionPane.showMessageDialog(warningPanel, 
                        "Warning! No COM ports detected", 
                        "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_startReading

    private void stopReading(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopReading
        bit = 48;
        if(!serial.sendData( bit )) {
            final JPanel warningPanel = new JPanel();
                
            JOptionPane.showMessageDialog(warningPanel, 
                        "Warning! No COM ports detected", 
                        "Warning", JOptionPane.WARNING_MESSAGE);
        }
        timer.stop();
        windField.setText("");
        tempField.setText("");
    }//GEN-LAST:event_stopReading

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        bit = 48;
        serial.sendData( bit );
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void statsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsItemActionPerformed
        new StatsUI().setVisible(true);
        bit = 48;
        serial.sendData( bit );
        timer.stop();
        windField.setText("");
        tempField.setText("");
    }//GEN-LAST:event_statsItemActionPerformed

    private void optionsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsItemActionPerformed
        new OptionUI(options).setVisible(true);
        bit = 48;
        if(!serial.sendData( bit )) {
            final JPanel warningPanel = new JPanel();
                
            JOptionPane.showMessageDialog(warningPanel, 
                        "Warning! No COM ports detected", 
                        "Warning", JOptionPane.WARNING_MESSAGE);
        }        
        timer.stop();
        windField.setText("");
        tempField.setText("");
    }//GEN-LAST:event_optionsItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel degreeLabel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem optionsItem;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JMenuItem statsItem;
    private javax.swing.JTextField tempField;
    private javax.swing.JLabel tempLabel;
    private javax.swing.JTextField windField;
    private javax.swing.JLabel windLabel;
    // End of variables declaration//GEN-END:variables
}
